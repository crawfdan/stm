####################################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.3.0] date: [Sun Aug 04 13:15:34 PDT 2019]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = nucleo207

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

GNU_ARM_TOOLS_VER_1 := 7
GNU_ARM_TOOLS_VER_2 := 2017-q4-major

#######################################
# paths
#######################################
GIT_ROOT_DIR    := $(shell git rev-parse --show-toplevel)
ST_DIR = $(GIT_ROOT_DIR)/ThirdParty/$(TARGET)
ST_FAMILY_LC = stm32f2xx
ST_FAMILY_UC = STM32F2XX

LINT_PATH := /usr/local/FlexeLint
BUILD_DIR = $(GIT_ROOT_DIR)/build/obj_$(TARGET)
APP_SRC_DIR = $(GIT_ROOT_DIR)/app/src
APP_INC_DIR = $(GIT_ROOT_DIR)/app/inc

#######################################
# git repo info
#######################################
PROJECT := $(TARGET)
SHA := $(shell git rev-parse --short=6 HEAD)
VERSION_DATE := $(shell git show -s --format=%cd --date=format:%Y-%m-%d-%H-%M)
SHORT_VERSION_DATE := $(shell git show -s --format=%cd --date=format:%y%m%d)
VERSION_STR := $(VERSION_DATE)-$(SHA)
SHORT_VERSION_STR := $(SHORT_VERSION_DATE)$(SHA)
BRANCH := $(shell git rev-parse --abbrev-ref HEAD)
TAG := $(shell git tag --points-at $(SHA))
URL := $(shell git config --get remote.origin.url)
RELEASE_OBJECT_NAME := $(PROJECT)-$(VERSION_STR)

######################################
# source
######################################
# C sources #TODO - Daniel - comment out sources that are not currently generated, add missing sources
C_SOURCES =
# C sources
C_SOURCES =  \
$(GIT_ROOT_DIR)/app/Drivers/Src/button.c \
$(GIT_ROOT_DIR)/app/Drivers/Src/led.c \
$(ST_DIR)/Src/main.c \
$(ST_DIR)Src/stm32f2xx_it.c \
$(ST_DIR)/Src/stm32f2xx_hal_msp.c \
$(ST_DIR)/Src/system_stm32f2xx.c \
$(ST_DIR)/Src/stm32f2xx_hal_timebase_tim.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_tim.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_tim_ex.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc_ex.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_cortex.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_flash.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_flash_ex.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_gpio.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_dma.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_dma_ex.c \
$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_exti.c \
$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c \
$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c \
$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/croutine.c \
$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/list.c \
$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/queue.c \
$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/tasks.c \
$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/timers.c \
$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c \
# ASM sources
ASM_SOURCES =
#ASM_SOURCES += $(ST_DIR)/MDK-ARM/startup_stm32f207xx.s
ASM_SOURCES += $(ST_DIR)/startup_stm32f207xx.s

#######################################
# binaries
#######################################
# Host system detection
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
	GNU_ARM_TOOLS_VER := gcc-arm-none-eabi-$(GNU_ARM_TOOLS_VER_1)-$(GNU_ARM_TOOLS_VER_2)
	GNU_INSTALL_ROOT := /opt
else # Assume Cygwin
	GNU_ARM_TOOLS_VER := "$(GNU_ARM_TOOLS_VER_1) $(GNU_ARM_TOOLS_VER_2)"
	GNU_INSTALL_ROOT := "c:/Program Files (x86)/GNU Tools ARM Embedded"
endif

GNU_PREFIX := arm-none-eabi
GNU_PATH   := $(GNU_INSTALL_ROOT)/$(GNU_ARM_TOOLS_VER)/bin/$(GNU_PREFIX)

# Toolchain commands
CC       := $(GNU_PATH)-gcc
AS       := $(GNU_PATH)-gcc -x assembler-with-cpp
AR       := $(GNU_PATH)-ar -r
LD       := $(GNU_PATH)-ld
NM       := $(GNU_PATH)-nm
OBJDUMP  := $(GNU_PATH)-objdump
CP       := $(GNU_PATH)-objcopy
SZ       := $(GNU_PATH)-size
SED      := /bin/sed

# Defaults to Python 3 in python:3-slim-buster image
PYTHON   := python

PREFIX = arm-none-eabi-
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3
# float-abi

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS =

# C defines
# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F207xx

# AS includes
AS_INCLUDES  =
//AS_INCLUDES += -I\Inc

# C includes #TODO - Daniel - comment out sources that are not currently generated, add missing sources
C_INCLUDES =  \
-I$(ST_DIR)/Inc \
-I$(GIT_ROOT_DIR)/app/Drivers/inc \
-I$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Inc \
-I$(ST_DIR)/Drivers/STM32F2xx_HAL_Driver/Inc/Legacy \
-I$(ST_DIR)/Drivers/CMSIS/Device/ST/STM32F2xx/Include \
-I$(ST_DIR)/Drivers/CMSIS/Include \
-I$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3 \
-I$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/include \
-I$(ST_DIR)/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS \


# Add application sources and include path
APPSOURCES =



C_SOURCES += $(APPSOURCES)
C_INCLUDES += -I$(APP_INC_DIR)

# compile gcc flagsd46f75aefce7b78ead0f300b1f1899e66996f767) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = $(ST_DIR)/STM32F207ZGTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections,--print-memory-usage -gdwarf-2


# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@

$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@

$(BUILD_DIR):
	mkdir $@

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

help:
	@echo "C_SOURCES= $(C_SOURCES)"
	@echo "C_INCLUDES = $(C_INCLUDES)"
	@echo "OBJECTS = $(OBJECTS)"
	@echo "ST_DIR= $(ST_DIR)"
	@echo "BUILD_DIR= $(BUILD_DIR)"

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***