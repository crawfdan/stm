####################################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.3.0] date: [Sun Aug 04 13:15:34 PDT 2019]
##########################################################################################################################
 
# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------
 
######################################
# target
######################################
TARGET = nucleo207
OPT = og
export MAKEFLAGS="-j 'nproc'"
######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT += -Os
 
GNU_ARM_TOOLS_VER_1 := 7
GNU_ARM_TOOLS_VER_2 := 2017-q4-major
 
#######################################
# paths
#######################################
GIT_ROOT_DIR    := $(shell git rev-parse --show-toplevel)
ST_DIR = $(GIT_ROOT_DIR)/stm/ThirdParty/$(TARGET) #DONE
ST_FAMILY_LC = stm32f2xx
ST_FAMILY_UC = STM32F2XX
 
LINT_PATH := /usr/local/FlexeLint
BUILD_DIR = $(GIT_ROOT_DIR)/build/obj_$(TARGET)
APP_SRC_DIR = $(GIT_ROOT_DIR)/app/src #may need to be stm dir - DONE
APP_INC_DIR = $(GIT_ROOT_DIR)/app/inc
 
#######################################
# git repo info
#######################################
PROJECT := $(TARGET)
SHA := $(shell git rev-parse --short=6 HEAD)
VERSION_DATE := $(shell git show -s --format=%cd --date=format:%Y-%m-%d-%H-%M)
SHORT_VERSION_DATE := $(shell git show -s --format=%cd --date=format:%y%m%d)
VERSION_STR := $(VERSION_DATE)-$(SHA)
SHORT_VERSION_STR := $(SHORT_VERSION_DATE)$(SHA)
BRANCH := $(shell git rev-parse --abbrev-ref HEAD)
TAG := $(shell git tag --points-at $(SHA))
URL := $(shell git config --get remote.origin.url)
RELEASE_OBJECT_NAME := $(PROJECT)-$(VERSION_STR)
 
######################################
# source
######################################
# C sources #TODO - Daniel - comment out sources that are not currently generated, add missing sources
C_SOURCES =
C_SOURCES += $(ST_DIR)/Src/main.c
C_SOURCES += $(ST_DIR)/Src/$(ST_FAMILY_LC)_it.c
C_SOURCES += $(ST_DIR)/Src/$(ST_FAMILY_LC)_hal_msp.c
C_SOURCES += $(ST_DIR)/Src/system_$(ST_FAMILY_LC).c
C_SOURCES += $(ST_DIR)/Drivers/$(ST_FAMILY_UC)_HAL_Driver/Src

 
# ASM sources
ASM_SOURCES =  
 
#######################################
# binaries
#######################################
# Host system detection
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
	GNU_ARM_TOOLS_VER := gcc-arm-none-eabi-$(GNU_ARM_TOOLS_VER_1)-$(GNU_ARM_TOOLS_VER_2)
	GNU_INSTALL_ROOT := /opt
else # Assume Cygwin
	GNU_ARM_TOOLS_VER := "$(GNU_ARM_TOOLS_VER_1) $(GNU_ARM_TOOLS_VER_2)"
	GNU_INSTALL_ROOT := "c:/Program Files (x86)/GNU Tools ARM Embedded"
endif
 
GNU_PREFIX := arm-none-eabi
GNU_PATH   := $(GNU_INSTALL_ROOT)/$(GNU_ARM_TOOLS_VER)/bin/$(GNU_PREFIX)
 
# Toolchain commands
CC       := $(GNU_PATH)-gcc
AS       := $(GNU_PATH)-gcc -x assembler-with-cpp
AR       := $(GNU_PATH)-ar -r
LD       := $(GNU_PATH)-ld
NM       := $(GNU_PATH)-nm
OBJDUMP  := $(GNU_PATH)-objdump
CP       := $(GNU_PATH)-objcopy
SZ       := $(GNU_PATH)-size
SED      := /bin/sed
 
# Defaults to Python 3 in python:3-slim-buster image
PYTHON   := python 
 
PREFIX = arm-none-eabi-
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m0plus
 
# fpu
# NONE for Cortex-M0/M0+/M3
# float-abi
 
# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)
 
# macros for gcc
# AS defines
AS_DEFS = 
 
# C defines
C_DEFS  =
C_DEFS += -DUSE_HAL_DRIVER
 
# AS includes
AS_INCLUDES  =
AS_INCLUDES += -I\Inc
 
# C includes #TODO - Daniel - comment out sources that are not currently generated, add missing sources
C_INCLUDES =
C_INCLUDES += -I$(ST_DIR)/Inc
C_INCLUDES += -I$(ST_DIR)/Drivers/$(ST_FAMILY_UC)_HAL_Driver/Inc
C_INCLUDES += -I$(ST_DIR)/Drivers/$(ST_FAMILY_UC)_HAL_Driver/Inc/Legacy
C_INCLUDES += -I$(ST_DIR)/Drivers/CMSIS/Device/ST/$(ST_FAMILY_UC)/Include
C_INCLUDES += -I$(ST_DIR)/Drivers/CMSIS/Include
 
#######################################
# Configure target specific
#######################################
ifeq ($(TARGET), nucleoF207)
LDSCRIPT = $(ST_DIR)/STM32F207ZGx_FLASH.ld #TODO - Daniel - check if this works
C_DEFS += -DSTM32F207xx
ASM_SOURCES +=  $(ST_DIR)/startup_stm32f207xx.s
C_DEFS += -DNUCLEOF207
endif
 
 
# Add application sources and include path
APPSOURCES =

 
 
C_SOURCES += $(APPSOURCES)
C_INCLUDES += -I$(APP_INC_DIR)
 
# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -Werror -fdata-sections -ffunction-sections -std=gnu11
 
ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif
 
 
# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
 
#######################################
# LDFLAGS
#######################################
# libraries
LIBS = -lc -lm -lnosys
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections,--print-memory-usage -gdwarf-2
 
#######################################
# targets
#######################################

# default action: build all
all: pre-build $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin
 
pre-build: version.h
	@rm -f $(BUILD_DIR)/$(TARGET)_files.lnt
	@$(CC) --version
 
VERSION_H = $(APP_INC_DIR)/version.h	
version.h:
	@echo "Generating FW version information"
	@echo "#ifndef _VERSION_H_" > $(VERSION_H)
	@echo "#define _VERSION_H_" >> $(VERSION_H)
	@echo " " >> $(VERSION_H)
#	@echo "// Git SHA hash, short version." >> $(VERSION_H)
#	@echo "// '*' at end indicates changed files in repository." >> $(VERSION_H)
#	@echo "#define GIT_SHA \"$(SHA)\"" >> $(VERSION_H)
#	@echo " " >> $(VERSION_H)
	@echo "// Git URL" >> $(VERSION_H)
	@echo "#define GIT_URL \"$(URL)\"" >> $(VERSION_H)
	@echo " " >> $(VERSION_H)
	@echo "// Git Branch" >> $(VERSION_H)
	@echo "#define GIT_BRANCH \"$(BRANCH)\"" >> $(VERSION_H)
	@echo " " >> $(VERSION_H)
#	@echo "// Git tag" >> $(VERSION_H)
#	@echo "#define GIT_TAG \"$(TAG)\"" >> $(VERSION_H)
#	@echo " " >> $(VERSION_H)
	@echo "// Simplexity Version" >> $(VERSION_H)
	@echo "#define VERSION \"$(SHORT_VERSION_STR)"\" >> $(VERSION_H)
	@echo " " >> $(VERSION_H)
	@echo "#endif // _VERSION_H_" >> $(VERSION_H)
 
# Generate list of files in component and product dirs
#  that are also used when builing this project.  Resulting 
#  files.lnt is used as an input to FlexeLint.
# Usage: make -f snap_mtr_ctrl_rev_4.mf lint
lint:
	$(MAKE) clean
	$(MAKE) all
	$(LINT_PATH)/flint -i $(LINT_PATH)/$(TARGET) loptions.lnt $(TARGET).lnt $(BUILD_DIR)/$(TARGET)_files.lnt | tee lint.out
 
#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
 
$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@echo "Building $@"
	@echo "$<" >> $(BUILD_DIR)/$(TARGET)_files.lnt
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
 
$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo "Building $@"
	@$(AS) -c $(CFLAGS) $< -o $@
 
$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@echo "Building $@"
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@ 2>&1 | tee build.log
 
$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@echo "Building $@"
	@$(HEX) $< $@
 
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@echo "Building $@"
	@$(BIN) $< $@
 
$(BUILD_DIR):
	@echo "Building $@"
	mkdir $@
 
#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
	@rm -f  $(VERSION_H)
	@rm -fR release-*
	@rm -f  release_fw_files
 
help:
	@echo "C_SOURCES= $(C_SOURCES)"
	@echo "C_INCLUDES = $(C_INCLUDES)"
	@echo "OBJECTS = $(OBJECTS)"
	@echo "ST_DIR= $(ST_DIR)"
	@echo "BUILD_DIR= $(BUILD_DIR)"
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)
 
 
#######################################
# FW Release
#######################################
 
# FW Release
VERSION_TAG := release-$(RELEASE_OBJECT_NAME)
MAKE_DIR := $(GIT_ROOT_DIR)/build
RELEASE_DIR := $(MAKE_DIR)/$(VERSION_TAG)
RELEASE_YAML := $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME)_release.yaml
RELEASE_XHTML := $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME)_release.html
RELEASE_XHTML_TEMPLATE := $(MAKE_DIR)/standard_release_page_template.xhtml
RELEASE_URL :=  https://simplexity.atlassian.net/wiki/spaces/GANACHE/pages/651954890/Firmware+Releases
 
release_tag:
	git tag $(VERSION_TAG)
 
# Setups of directories and YAML release config.
release_data_capture: all
	@-rm -rf $(RELEASE_DIR)
	@mkdir $(RELEASE_DIR)
	@echo -n "" > release_fw_files
	@cp -f $(RELEASE_XHTML_TEMPLATE) $(RELEASE_XHTML)
	@echo "- title: '$(PROJECT) FW Release - Version: $(VERSION_STR)'" > $(RELEASE_YAML)
	@echo "- url: $(RELEASE_URL)" >>  $(RELEASE_YAML)
	@echo "- body: $(RELEASE_XHTML)" >>  $(RELEASE_YAML)
	@$(MAKE_DIR)/release_notes.py $(PROJECT) > $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME)-commit-comments.html
	@$(SED) -e '/.*COMMENTS.*/{r $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME)-commit-comments.html' -e ' d}' < $(RELEASE_XHTML_TEMPLATE) > $(RELEASE_XHTML)
 
# Moves files around and posts to wiki
release: release_tag release_data_capture
	@cp $(BUILD_DIR)/$(PROJECT).elf $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).elf
	@echo -n "$(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).elf " >> release_fw_files
	@echo "- attachment:" >> $(RELEASE_YAML)
	@echo "    location: $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).elf" >>  $(RELEASE_YAML)
	@echo "    comment: $(VERSION_STR)" >>  $(RELEASE_YAML)
	@cp $(BUILD_DIR)/$(PROJECT).hex $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).hex
	@echo -n "$(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).hex " >> release_fw_files
	@echo "- attachment:" >> $(RELEASE_YAML)
	@echo "    location: $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).hex" >>  $(RELEASE_YAML)
	@echo "    comment: $(VERSION_STR)" >>  $(RELEASE_YAML)
	@cp $(BUILD_DIR)/$(PROJECT).map $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).map
	@echo -n "$(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).map " >> release_fw_files
	@echo "- attachment:" >> $(RELEASE_YAML)
	@echo "    location: $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).map" >>  $(RELEASE_YAML)
	@echo "    comment: $(VERSION_STR)" >>  $(RELEASE_YAML)
#	@cp $(BUILD_DIR)/$(PROJECT).lst $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).lst
#	@echo -n "$(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).lst " >> release_fw_files#
#	@echo "- attachment:" >> $(RELEASE_YAML)
#	@echo "    location: $(RELEASE_DIR)/$(RELEASE_OBJECT_NAME).lst" >>  $(RELEASE_YAML)
#	@echo "    comment: $(VERSION_STR)" >>  $(RELEASE_YAML)
	@echo "$(RELEASE_DIR)/$(RELEASE_OBJECT_NAME)-commit-comments.html " >> release_fw_files
	@$(PYTHON) $(MAKE_DIR)/confluence_post.py -f $(RELEASE_YAML) -u $(CONFLUENCE_USER) -p $(CONFLUENCE_PASS)
	@git push origin $(VERSION_TAG)
 
# *** EOF ***